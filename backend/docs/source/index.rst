.. SchoolGuard documentation master file, created by
   sphinx-quickstart on Fri Apr 25 10:34:09 2025.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

SchoolGuard documentation
=========================

Add your content using ``reStructuredText`` syntax. See the
`reStructuredText <https://www.sphinx-doc.org/en/master/usage/restructuredtext/index.html>`_
documentation for details.


.. toctree::
   :maxdepth: 2
   :caption: Contents:

.. _api-documentation:

Документация API системы контроля доступа
========================================

Обзор
-----

Данный документ описывает RESTful API, разработанный с использованием FastAPI, для управления доступом с интеграцией MQTT для обработки пропусков в реальном времени. API поддерживает аутентификацию пользователей, управление данными студентов и взаимодействие с IoT-устройствами через MQTT.

.. contents:: Содержание
   :local:
   :depth: 2

Зависимости
-----------

- **FastAPI**: Фреймворк для создания API.
- **SQLAlchemy**: ORM для работы с базой данных.
- **Passlib**: Хеширование паролей с использованием bcrypt.
- **Paho MQTT**: Клиент MQTT для обмена сообщениями в реальном времени.
- **Pydantic**: Валидация и сериализация данных.
- **CORSMiddleware**: Поддержка Cross-Origin Resource Sharing.

Модели базы данных
------------------

.. _user-model:

User
~~~~

Модель пользователя системы с учетными данными.

- **Атрибуты**:
  - ``username``: Уникальный идентификатор (строка).
  - ``hashed_password``: Хешированный пароль (строка).
  - ``is_admin``: Булево значение, указывающее на права администратора.

.. _student-model:

Student
~~~~~~~

Модель студента с данными контроля доступа.

- **Атрибуты**:
  - ``fio``: ФИО (строка).
  - ``pass_id``: Уникальный идентификатор пропуска (строка).
  - ``last_pass_date``: Дата последнего использования пропуска (строка).
  - ``gate_pass``: Булево значение для доступа через ворота.
  - ``turnstile_pass``: Булево значение для доступа через турникет.
  - ``cabinet_pass``: Булево значение для доступа в кабинет.
  - ``cabinet_number``: Номер кабинета (целое число).

Конфигурация
------------

.. _cors-config:

CORS
~~~~

CORS настроен для следующих источников:

- ``http://localhost:5173``
- ``http://127.0.0.1``

Разрешены все методы (``*``) и заголовки (``*``) с поддержкой учетных данных.

.. _oauth2-config:

OAuth2
~~~~~~

Используется ``OAuth2PasswordBearer`` с конечной точкой токена ``/token``.

.. _password-hashing:

Хеширование паролей
~~~~~~~~~~~~~~~~~~~

Используется ``bcrypt`` через ``passlib`` для безопасного хеширования паролей.

.. _mqtt-config:

Конфигурация MQTT
~~~~~~~~~~~~~~~~~

- **Брокер**: ``127.0.0.1``
- **Порт**: ``1883``
- **Учетные данные**: Имя пользователя ``leonid``, пароль ``2006``
- **Топики**:
  - Подписка: ``esp8266/pass_id``, ``esp8266/pass_id_2``, ``esp8266/pass_id_3``
  - Публикация: ``esp8266/gate_control``, ``esp8266/turnstile_pass``, ``esp8266/cabinet_pass``

Функциональность MQTT
--------------------

Приложение подписывается на топики MQTT для получения идентификаторов пропусков от IoT-устройств и обновляет записи доступа студентов в базе данных.

.. _mqtt-callbacks:

Обработчики
~~~~~~~~~~~

- **on_connect**:
  - Подписывается на ``MQTT_TOPIC_SUB``, ``MQTT_TOPIC_SUB_2`` и ``MQTT_TOPIC_SUB_3``.
  - Логирует статус подключения.

- **on_message**:
  - Обрабатывает входящие идентификаторы пропусков.
  - Запрашивает в базе данных студента по ``pass_id``.
  - Обновляет флаги доступа (``gate_pass``, ``turnstile_pass`` или ``cabinet_pass``) в зависимости от топика.
  - Публикует JSON-ответ в соответствующий топик публикации:
    - ``pass_id``: Полученный идентификатор пропуска.
    - ``access_granted``: Булево значение, указывающее, найден ли студент.
  - Обрабатывает ошибки с откатом транзакций и логированием.

Модели Pydantic
---------------

.. _studentbase-model:

StudentBase
~~~~~~~~~~~

Базовая модель для данных студента.

- ``fio: str``
- ``pass_id: str``
- ``last_pass_date: str``
- ``gate_pass: bool``
- ``turnstile_pass: bool``
- ``cabinet_pass: bool``
- ``cabinet_number: int``

.. _studentcreate-model:

StudentCreate
~~~~~~~~~~~~~

Наследуется от ``StudentBase`` для создания новых студентов.

.. _studentupdate-model:

StudentUpdate
~~~~~~~~~~~~~

Наследуется от ``StudentBase`` для обновления данных студентов.

.. _usercreate-model:

UserCreate
~~~~~~~~~~

Для создания новых пользователей.

- ``username: str``
- ``password: str``

.. _passwordchange-model:

PasswordChange
~~~~~~~~~~~~~~

Для изменения пароля пользователя.

- ``new_password: str``

.. _userresponse-model:

UserResponse
~~~~~~~~~~~~

Для возврата данных пользователя.

- ``username: str``
- ``is_admin: bool``
- Настроено с ``from_attributes=True`` для совместимости с ORM.

Конечные точки API
------------------

.. _auth-endpoints:

Аутентификация
~~~~~~~~~~~~~~

POST /token
^^^^^^^^^^^

Аутентифицирует пользователя и возвращает токен OAuth2.

- **Запрос**: ``OAuth2PasswordRequestForm`` (username, password)
- **Ответ**: JSON с ``access_token`` (имя пользователя) и ``token_type`` ("bearer")
- **Ошибки**:
  - ``401 Unauthorized``: Неверное имя пользователя или пароль.

.. _user-endpoints:

Управление пользователями
~~~~~~~~~~~~~~~~~~~~~~~~~

GET /me
^^^^^^^

Возвращает данные текущего пользователя.

- **Аутентификация**: Требуется токен OAuth2.
- **Ответ**: JSON с ``username`` и ``is_admin``.
- **Ошибки**:
  - ``401 Unauthorized``: Неверный токен.

POST /users
^^^^^^^^^^^

Создает нового пользователя (только для администраторов).

- **Аутентификация**: Требуется пользователь с правами администратора.
- **Запрос**: ``UserCreate`` (username, password)
- **Ответ**: JSON с сообщением "Пользователь создан".
- **Ошибки**:
  - ``403 Forbidden``: Пользователь не администратор.
  - ``401 Unauthorized``: Неверный токен.

PUT /users/{username}/password
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Изменяет пароль пользователя (только для администраторов).

- **Аутентификация**: Требуется пользователь с правами администратора.
- **Запрос**: ``PasswordChange`` (new_password)
- **Ответ**: JSON с сообщением "Пароль изменён".
- **Ошибки**:
  - ``403 Forbidden``: Пользователь не администратор.
  - ``404 Not Found``: Пользователь не найден.
  - ``401 Unauthorized``: Неверный токен.

GET /users
^^^^^^^^^^

Возвращает список всех пользователей (только для администраторов).

- **Аутентификация**: Требуется пользователь с правами администратора.
- **Ответ**: Список объектов ``UserResponse``.
- **Ошибки**:
  - ``403 Forbidden``: Пользователь не администратор.
  - ``401 Unauthorized``: Неверный токен.

DELETE /users/{username}
^^^^^^^^^^^^^^^^^^^^^^^

Удаляет пользователя (только для администраторов).

- **Аутентификация**: Требуется пользователь с правами администратора.
- **Ответ**: JSON с сообщением "Пользователь удалён".
- **Ошибки**:
  - ``403 Forbidden``: Пользователь не администратор.
  - ``404 Not Found``: Пользователь не найден.
  - ``401 Unauthorized``: Неверный токен.

.. _student-endpoints:

Управление студентами
~~~~~~~~~~~~~~~~~~~~~

GET /students
^^^^^^^^^^^^^

Возвращает список всех студентов.

- **Аутентификация**: Требуется токен OAuth2.
- **Ответ**: Список объектов ``StudentBase``.
- **Ошибки**:
  - ``401 Unauthorized``: Неверный токен.

POST /students
^^^^^^^^^^^^^^

Создает нового студента (только для администраторов).

- **Аутентификация**: Требуется пользователь с правами администратора.
- **Запрос**: ``StudentCreate``
- **Ответ**: Созданный объект ``StudentBase``.
- **Ошибки**:
  - ``403 Forbidden``: Пользователь не администратор.
  - ``401 Unauthorized``: Неверный токен.

PUT /students/{pass_id}
^^^^^^^^^^^^^^^^^^^^^^^

Обновляет данные студента (только для администраторов).

- **Аутентификация**: Требуется пользователь с правами администратора.
- **Запрос**: ``StudentUpdate``
- **Ответ**: Обновленный объект ``StudentBase``.
- **Ошибки**:
  - ``403 Forbidden``: Пользователь не администратор.
  - ``404 Not Found``: Студент не найден.
  - ``401 Unauthorized``: Неверный токен.

DELETE /students/{pass_id}
^^^^^^^^^^^^^^^^^^^^^^^^^^

Удаляет студента (только для администраторов).

- **Аутентификация**: Требуется пользователь с правами администратора.
- **Ответ**: JSON с сообщением "Студент удалён".
- **Ошибки**:
  - ``403 Forbidden``: Пользователь не администратор.
  - ``404 Not Found``: Студент не найден.
  - ``401 Unauthorized``: Неверный токен.

Вспомогательные функции
-----------------------

- **get_db**: Предоставляет сессию базы данных и обеспечивает ее закрытие.
- **get_password_hash**: Хеширует пароль с использованием bcrypt.
- **verify_password**: Проверяет пароль на соответствие хешу.
- **get_current_user**: Извлекает текущего пользователя по токену OAuth2, возвращает ошибку ``401`` при неверном токене.

Примеры использования
---------------------

.. _auth-example:

Аутентификация
~~~~~~~~~~~~~~

.. code-block:: bash

   curl -X POST "http://localhost:8000/token" -d "username=admin&password=secret"

**Ответ**:

.. code-block:: json

   {"access_token": "admin", "token_type": "bearer"}

.. _students-example:

Получение списка студентов
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: bash

   curl -H "Authorization: Bearer admin" "http://localhost:8000/students"

**Ответ**:

.. code-block:: json

   [
     {
       "fio": "Иванов Иван",
       "pass_id": "12345",
       "last_pass_date": "2023-10-01",
       "gate_pass": true,
       "turnstile_pass": false,
       "cabinet_pass": false,
       "cabinet_number": 101
     }
   ]

.. _mqtt-example:

Сообщение MQTT
~~~~~~~~~~~~~

**Получено** на ``esp8266/pass_id``: ``12345``

**Опубликовано** на ``esp8266/gate_control``:

.. code-block:: json

   {"pass_id": "12345", "access_granted": true}

Обработка ошибок
----------------

- **Ошибки базы данных**: Обрабатываются с помощью блоков try-except с откатом транзакций при сбоях.
- **Ошибки аутентификации**: Возвращают ``401`` с описанием.
- **Ошибки авторизации**: Возвращают ``403`` для доступа без прав администратора.
- **Ошибки "не найдено"**: Возвращают ``404`` для отсутствующих ресурсов.
